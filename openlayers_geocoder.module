<?php

define('GOOGLE_GEOCODER_URL', 'http://maps.google.com/maps/api/geocode/json?');
define('GOOGLE_GEOCODER_STATUS_OK', 'OK');
define('OPENLAYERS_GEOCODER_POSITION_ABOVE', -10);
define('OPENLAYERS_GEOCODER_POSITION_BELOW', +10);

/**
 * Implementation of hook_init().
 */
function openlayers_geocoder_init() {
  module_load_include('inc', 'openlayers_geocoder', 'includes/openlayers_geocoder.theme');
  module_load_include('inc', 'openlayers_geocoder', 'includes/openlayers_geocoder.token');
}

/**
 * Implementation of hook_menu().
 */
function openlayers_geocoder_menu() {
  $items = array();
  $items['openlayers/geocoder/response'] = array(
    'page callback' => 'openlayers_geocoder_get_response',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['openlayers/geocoder/response/process'] = array(
    'page callback' => 'openlayers_geocoder_process_response',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * @file
 * Add geocoding capabilities to OpenLayer CCK widget.
 *
 * @ingroup openlayers
 */

function openlayers_geocoder_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $field = $form['#field'];
  $instance = $form['#instance'];
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $type_name = $instance['bundle'];
  $entity_type =  $instance['entity_type'];
  if ($instance['widget']['type'] == 'geofield_openlayers') {

    $form['instance']['widget']['settings']['openlayers_geocoder'] = array(
      '#type' => 'fieldset',
      '#title' => t('Openlayers Geocoder'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Autocomplete text fields with geocoding response values. Check <em>"Enable"</em> to activate autocompletion of a specified field. Check <em>"Override"</em> to let users override field values after autocompletion took place. Fill <em>"Content"</em> using the replacement patterns listed below.'),
      '#theme' => 'openlayers_geocoder_autocompletion_settings',
      '#weight' => 100,
    );
    $i = -1;
    foreach (openlayers_geocoder_get_fields($entity_type, $type_name) as $name => $field) {
      if (in_array($field['widget']['type'], array('text_textfield', 'options_select')) ) {
        $i++;
        $row = array();
        $type = ($field['widget']['type'] == 'options_select') ? 'select' : 'input';
        $row['autocompletion_'. $name .'_enable'] = array('#type' => 'checkbox', '#default_value' => isset($settings['openlayers_geocoder'][$i]['autocompletion_'. $name .'_enable']) ? $settings['openlayers_geocoder'][$i]['autocompletion_'. $name .'_enable'] : 0);
        $row['autocompletion_'. $name .'_override'] = array('#type' => 'checkbox', '#default_value' => isset($settings['openlayers_geocoder'][$i]['autocompletion_'. $name .'_override']) ? $settings['openlayers_geocoder'][$i]['autocompletion_'. $name .'_override'] : 0);
        $row['autocompletion_'. $name .'_field'] = array('#type' => 'markup', '#markup' => $field['field_name']);
        $row['autocompletion_'. $name .'_content'] = array('#type' => 'textfield', '#default_value' => isset($settings['openlayers_geocoder'][$i]['autocompletion_'. $name .'_content']) ? $settings['openlayers_geocoder'][$i]['autocompletion_'. $name .'_content'] : NULL);
        $row['autocompletion_'. $name .'_type'] = array('#type' => 'hidden', '#default_value' => $type);
        $form['instance']['widget']['settings']['openlayers_geocoder'][$i] = $row;
      }
    }

    $form['instance']['widget']['settings']['openlayers_geocoder']['token_help'] = array(
      '#title' => t('Replacement patterns and settings'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['instance']['widget']['settings']['openlayers_geocoder']['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('geocoder'),
      '#global_types' => TRUE,
      '#click_insert' => TRUE
      );
    $form['instance']['widget']['settings']['openlayers_geocoder']['token_help']['position'] = array(
      '#type' => 'select',
      '#title' => t('Address field position'),
      '#description' => t("The position of the 'Search address' autocomplete field (relative to the OpenLayers map)."),
      '#default_value' => isset($settings['openlayers_geocoder']['token_help']['position']) ? $settings['openlayers_geocoder']['token_help']['position'] : OPENLAYERS_GEOCODER_POSITION_BELOW,
      '#options' => array(
        OPENLAYERS_GEOCODER_POSITION_ABOVE => t('Above'),
        OPENLAYERS_GEOCODER_POSITION_BELOW => t('Below'),
      ),
    );

    $form['instance']['widget']['settings']['openlayers_geocoder']['token_help']['enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Openlayers Geocoder'),
      '#default_value' => isset($settings['openlayers_geocoder']['token_help']['enable']) ? $settings['openlayers_geocoder']['token_help']['enable'] : 1,
      );
  }

}


/**
 * Helper function to get the fields for a particular content type.
 * Helps resolve the case in which content fields were created in another
 * content type, and content_fields won't work correctly.
 *
 * @param $type_name The name of the content type.
 * @return Array in the same structure as if it were coming from content_fields()
 */
function openlayers_geocoder_get_fields($entity_type, $type_name) {
  $fields = field_info_instances($entity_type, $type_name);
  return isset($fields) ? $fields : array();
}

/**
 * Implementation of hook_theme().
 */
function openlayers_geocoder_theme($existing, $type, $theme, $path) {
  return array(
    'openlayers_geocoder_result' => array(
      'render element' => 'result',
      'template' => 'openlayers-geocoder-result',
      'path' => drupal_get_path('module', 'openlayers_geocoder') .'/theme',
    ),
    'openlayers_geocoder_autocompletion_settings' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Get response from from Google geocoding web service
 */
function openlayers_geocoder_get_response($query = '') {
  $locations = array();
  if ($response = openlayers_geocoder_response($query)) {
    foreach ($response as $location) {
      $locations[$location['address']] = theme('openlayers_geocoder_result', $location['components']);
    }
  }
  drupal_json_output($locations);
}

/**
 * Process a successful response returning location
 * coordinates and replacement tokens for filed completion
 */
function openlayers_geocoder_process_response() {

  $location['latitude'] = 0;
  $location['longitude'] = 0;
  $location['box'] = array();
  $location['fields'] = array();
  $location['keep_points'] = FALSE;

  $query = check_plain($_POST['query']);
  $fieldname = check_plain($_POST['fieldname']);
  $entity_type = check_plain($_POST['entity_type']);
  $bundle_name = check_plain($_POST['bundle_name']);


  if ($response = openlayers_geocoder_response($query)) {

    $result = array_shift($response);
    $location['latitude'] = $result['location']['lat'];
    $location['longitude'] = $result['location']['lng'];
    $location['box']['north'] = $result['bounds']['northeast']->lat;
    $location['box']['east'] = $result['bounds']['northeast']->lng;
    $location['box']['south'] = $result['bounds']['southwest']->lat;
    $location['box']['west'] = $result['bounds']['southwest']->lng;

    $field = field_info_instance($entity_type, $fieldname, $bundle_name);

    if ($field && $field['widget']['type'] == 'geofield_openlayers') {
      // @ check out keep_points
      if (isset($field['widget']['keep_points'])) {
        $location['keep_points'] = $field['widget']['keep_points'];
      }
      if (module_exists('token')) {
        $fields = openlayers_geocoder_widget_parse_settings($field['widget']['settings']['openlayers_geocoder']);
         foreach ($fields as $name => $settings) {
          if ($settings['enable']) {
            $location['fields'][$name]['name'] = $name;
            $location['fields'][$name]['override'] = $settings['override'];
            $location['fields'][$name]['type'] = $settings['type'];
            $location['fields'][$name]['value'] = token_replace($settings['content'], array('openlayers_geocoder' => $result));
          }
        }
      }
    }
  }
  drupal_json_output($location);
}

/**
 * Query Google geocoding web service.
 *
 * @param $address
 *  Address or location name
 * @return
 *  Array of placemarks
 */
function openlayers_geocoder_response($address) {

  $locations = $args = array();

  // The address that you want to geocode.
  $args['address'] = str_replace(' ', '+', $address);

  // The language in which to return results. If "language" is not supplied,
  // the geocoder will attempt to use the native language of the domain
  // from which the request is sent wherever possible.
  $language = language_default();
  $args['language'] = $language->language;

  // Response encoding.
  $args['oe'] = 'utf-8';

  //  Indicates whether or not the geocoding request comes from a device with a location sensor. This value must be either true or false.
  $args['sensor'] = 'false';

  //The textual latitude/longitude value for which you wish to obtain the closest, human-readable address.
  // $args['latlng'] = '40.714224,-73.961452';

  // The bounding box of the viewport within which to bias geocode results more prominently.
  // $args['bounds'] = '';

  // The region code, specified as a ccTLD ("top-level domain") two-character value.
  // $args['region'] = '';

  $query = http_build_query($args, '', '&');

  if (function_exists("curl_init")) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, GOOGLE_GEOCODER_URL . $query);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($ch);
    curl_close($ch);
  }
  else {
    $result = file_get_contents(GOOGLE_GEOCODER_URL . $query);
  }
  $response = json_decode($result);
  if ($response->status == GOOGLE_GEOCODER_STATUS_OK) {
    foreach ($response->results as $result) {
      $location = $components = array();
      foreach ($result->address_components as $component) {
        $key = $component->types[0];
        $components[$key] = $component->long_name;
        if ($key == 'country') {
          $components['country_code'] = $component->short_name;
        }
      }
      $components['street_address'] = $location['address'] = $result->formatted_address;
      $location['components'] = $components;
      $location['location'] = (array) $result->geometry->location;
      $location['bounds'] = (array) $result->geometry->viewport;
      $locations[] = $location;
    }
  }
  return $locations;
}

function openlayers_geocoder_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add a css class to widget form elements for all fields of type mytype.
  if ($context['field']['type'] == 'geofield' && $context['instance']['widget']['type'] = 'geofield_openlayers' && isset($context['instance']['widget']['settings']['openlayers_geocoder']['token_help']['enable'])) {
    if ($context['instance']['widget']['settings']['openlayers_geocoder']['token_help']['enable'] == 1) {
      // Be sure not to overwrite existing attributes.
      $element['openlayers_geocoder_query'] = array(
        '#title' => t('search address'),
        '#type' => 'textfield',
        '#autocomplete_path' => 'openlayers/geocoder/response',
        '#weight' => isset($context['instance']['widget']['settings']['openlayers_geocoder']['token_help']['position']) ? $context['instance']['widget']['settings']['openlayers_geocoder']['token_help']['position'] : OPENLAYERS_GEOCODER_POSITION_BELOW,
        '#attributes' => array(
          'geoautocomplete' => true,
          'fieldname' => $element['#field_name'],
          'entity_type' => $context['instance']['entity_type'],
          'bundle_name' => $context['instance']['bundle'],                    
          'dashed' => str_replace('_', '-', $element['#field_name']),
        ),
      );
    }
  }
}


/**
 * Helper function: parse widget settings to retreive
 * CCK field mapping information
 *
 * @param $widget
 *    Field widget.
 */
function openlayers_geocoder_widget_parse_settings(&$widget) {
  $settings = array();
  foreach ($widget as $row) {
    foreach ($row as $key => $value) {
      if (preg_match_all('/autocompletion_(.*)_(enable|override|content|type)/', $key, $matches)) {
        $settings[$matches[1][0]][$matches[2][0]] = $value;
      }
    }
  }
  return $settings;
}
